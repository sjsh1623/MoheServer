plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'com.mohe'
version = '0.0.1-SNAPSHOT'

ext {
    testcontainersVersion = '1.19.7'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin' && details.requested.name == 'kotlin-reflect' && details.requested.version == null) {
                details.useVersion '1.9.20'
            }
        }
    }
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:3.2.0")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Spring Batch
    implementation('org.springframework.boot:spring-boot-starter-batch') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-jdbc'
    }

    // Jackson dependencies are already included in spring-boot-starter-web
    // HikariCP is already included in spring-boot-starter-data-jpa
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    
    // PostgreSQL driver
    runtimeOnly 'org.postgresql:postgresql'

    // BCrypt is already included in spring-boot-starter-security
    
    // Redis for token storage (optional)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Swagger/OpenAPI documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    
    // Vector database support  
    implementation 'com.pgvector:pgvector:0.1.4'
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
    
    // YAML configuration support
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    
    // HTML sanitization for email content and HTML tag removal
    implementation 'org.jsoup:jsoup:1.17.2'
    
    // OpenAI client with compatible versions for Java 21
    implementation 'com.aallam.openai:openai-client:3.8.0'
    implementation 'io.ktor:ktor-client-okhttp:2.3.9'

    // HTTP Client Libraries - compatible versions for Java 21
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

    // Lombok - explicitly specify version for Java 21 compatibility
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'com.h2database:h2'
    testImplementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
}

tasks.withType(JavaCompile) {
    options.release = 21
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

tasks.named('test') {
    useJUnitPlatform()
}

// Load .env file for bootRun task
tasks.named('bootRun') {
    // Read .env file and set as environment variables
    def envFile = file('.env')
    if (envFile.exists()) {
        envFile.readLines().each { line ->
            def trimmedLine = line.trim()
            // Skip comments and empty lines
            if (!trimmedLine.startsWith('#') && !trimmedLine.isEmpty() && trimmedLine.contains('=')) {
                def (key, value) = trimmedLine.split('=', 2)
                environment key.trim(), value.trim()
            }
        }
    }
}
