package com.mohe.spring.entity;

import com.mohe.spring.config.PGvectorType;
import com.pgvector.PGvector;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.Type;

import java.time.LocalDateTime;

/**
 * Entity representing a keyword embedding for a place.
 * Stores vector embeddings generated by Kanana embedding service.
 */
@Entity
@Table(name = "place_keyword_embeddings")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class PlaceKeywordEmbedding {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "place_id", nullable = false)
    private Long placeId;

    @Column(name = "keyword", nullable = false, columnDefinition = "TEXT")
    private String keyword;

    @Column(name = "embedding", columnDefinition = "vector(1792)")
    @Type(PGvectorType.class)
    private PGvector embedding;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @PrePersist
    protected void onCreate() {
        if (createdAt == null) {
            createdAt = LocalDateTime.now();
        }
    }

    /**
     * Constructor for creating a new keyword embedding
     */
    public PlaceKeywordEmbedding(Long placeId, String keyword, float[] embeddingArray) {
        this.placeId = placeId;
        this.keyword = keyword;
        this.embedding = new PGvector(embeddingArray);
        this.createdAt = LocalDateTime.now();
    }

    /**
     * Get the embedding as a float array
     */
    public float[] getEmbeddingAsArray() {
        return embedding != null ? embedding.toArray() : null;
    }

    /**
     * Set the embedding from a float array
     */
    public void setEmbeddingFromArray(float[] embeddingArray) {
        this.embedding = embeddingArray != null ? new PGvector(embeddingArray) : null;
    }
}
